{"ast":null,"code":"import BtnInFormVue from \"./BtnInForm.vue\";\nimport StatucBtnVue from \"./StatucBtn.vue\";\nexport default {\n  name: \"TaskItem\",\n  components: {\n    BtnInFormVue,\n    StatucBtnVue\n  },\n  props: {\n    /**\r\n     * @return Object  {id: 1, text: \"test\", status: 0}\r\n     */\n    task: {\n      type: Object,\n      required: true\n    }\n  },\n  methods: {\n    handleStatusClick: function () {\n      // TODO: взять task.id локально и передать в метод обновления задачи из стора\n      this.$store.dispatch(\"changeStatus\", this.task.id);\n    },\n    handleTaskDelete: function () {\n      // TODO: взять task.id локально и передать в метод удаления задачи из стора\n      this.$store.dispatch(\"deleteTask\", this.task.id);\n    },\n    handleTaskClick: function () {\n      // this.$store.dispatch(\"taskClick\", this.task.id);\n      if (this.task.isEdit) {\n        this.$store.dispatch(\"activetTask\", this.task.id);\n      }\n      el;\n    }\n  },\n  computed: {\n    getTaskList() {\n      return this.$store.state.taskList;\n    },\n    isEdit() {\n      return this.$store.state.editTaskId === this.task.id;\n    }\n  }\n};","map":{"version":3,"mappings":"AAmBA;AACA;AAEA;EACAA;EAEAC;IACAC;IACAC;EACA;EACAC;IACA;AACA;AACA;IACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;IACA;IACAC;MACA;MACA;QACA;MACA;MAAAC;IACA;EACA;EACAC;IACAC;MACA;IACA;IACAC;MACA;IACA;EACA;AACA","names":["name","components","BtnInFormVue","StatucBtnVue","props","task","type","required","methods","handleStatusClick","handleTaskDelete","handleTaskClick","el","computed","getTaskList","isEdit"],"sourceRoot":"src/components","sources":["TaskItem.vue"],"sourcesContent":["<template>\r\n  <div\r\n    :id=\"task.id\"\r\n    :key=\"task.id\"\r\n    :class=\"['taskItem', isEdit ? 'taskItem_active' : '']\"\r\n  >\r\n    <!-- Как-то передать статус и обработчик -->\r\n    <StatucBtnVue @click=\"handleStatusClick\" :isActive=\"task.isActive\" />\r\n    <div :class=\"task.isActive ? 'task__text_active' : ''\">\r\n      <div @click=\"handleTaskClick\" class=\"taskItemText\">\r\n        <span>{{ task.text }}</span>\r\n      </div>\r\n    </div>\r\n    <!-- Как-то передать обработчик -->\r\n    <BtnInFormVue @click=\"handleTaskDelete\" class=\"BtnDelete\" label=\"Удалить\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport BtnInFormVue from \"./BtnInForm.vue\";\r\nimport StatucBtnVue from \"./StatucBtn.vue\";\r\n\r\nexport default {\r\n  name: \"TaskItem\",\r\n\r\n  components: {\r\n    BtnInFormVue,\r\n    StatucBtnVue,\r\n  },\r\n  props: {\r\n    /**\r\n     * @return Object  {id: 1, text: \"test\", status: 0}\r\n     */\r\n    task: {\r\n      type: Object,\r\n      required: true,\r\n    },\r\n  },\r\n  methods: {\r\n    handleStatusClick: function () {\r\n      // TODO: взять task.id локально и передать в метод обновления задачи из стора\r\n      this.$store.dispatch(\"changeStatus\", this.task.id);\r\n    },\r\n    handleTaskDelete: function () {\r\n      // TODO: взять task.id локально и передать в метод удаления задачи из стора\r\n      this.$store.dispatch(\"deleteTask\", this.task.id);\r\n    },\r\n    handleTaskClick: function () { \r\n      // this.$store.dispatch(\"taskClick\", this.task.id);\r\n      if(this.task.isEdit) {\r\n      this.$store.dispatch(\"activetTask\", this.task.id);\r\n    } el\r\n    },\r\n  },\r\n  computed: {\r\n    getTaskList() {\r\n      return this.$store.state.taskList;\r\n    },\r\n    isEdit() {\r\n      return this.$store.state.editTaskId === this.task.id;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.taskItem {\r\n  flex-direction: row;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n.taskItem_active {\r\n  background-color: rgba(255, 140, 5, 0.7);\r\n}\r\n.BtnDelete {\r\n  opacity: 0.3;\r\n}\r\n.task__text_active {\r\n  text-decoration: line-through;\r\n}\r\n\r\n/* .task-item {}\r\n  .task-item__btn{}\r\n  .task-item__btn_active{}\r\n\r\n  .btn {}\r\n\r\n  .btn__text{}\r\n  .btn__text_warning{} */\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}